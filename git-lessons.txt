Створення репозиторію:
    Знаходячись у папці вашого проекту виконайте наступну команду:
        git init
    вона створить у ващій поточній папці приховану папку .git в якій будуть зберігатися всі дані про ваш проект які гіт пам'ятає
    

Щоб вивести собі довідку про поточний стан репозиторію ви можете ввести команду
    git status
    
Для індексації файлів використовуєтся команда:
    git add <шлях_до_файлу>...

Коли у вас є проіндексовані файли ви можете зробити коміт (зберегти нову версію вашого проекту)
    git commit  
Вам відкриеться текстовий редактор в якому напишите що в цій версіїї змінилось / додалось

    git commit -m "Опис коміту"
    
Ви можете створити спеціальний коміт "виправлення", він замість того щоб з'являтися як новий коміт буде заміщати останній зроблений коміт. Таким чином до останнього коміту можна додавати якісь зміни у існуючих файлах, додавати нові файли та змінювати назву самого коміту

    git commit --amend
    
    git commit --amend -m "Новий опис"

Щоб подивитися на список комітів виконайте команду
    git log

Різні режими видачі подробицей про коміт
    git log --pretty= 
                     oneline - найкомпактніший режим
                     short - короткий режим
                     medium - за замовчанням (можно не писати)
                     full - більш детальне відображення ніж medium
                     fuller - максимально детальне відображення

Команда для перегляду змін у файлах (не показує проіндексовані зміни):
    git diff 
    
Команда для перегляду проіндексованих змін у файлах:
    git diff --staged

Команда для перегляду локальної історії комітів: 
     git reflog
Вона може бачити аменд-коміти навідміну від git log

Команди для віддаленого репозиторію:
    Додати адресу віддаленого репозиторію до вашого локального репозиторію:
        git remote add <псевдонім_віддаленого_репозиторію> <адреса_віддаленого_репозиторію>
        
        git remote add origin https://github.com/fc-fullstack-courses/pfe-2024-1-git-lessons.git
        
Перевірка віддалених репозиторіїв:
    git remote -v
    
завантаження локальних комітів на віддалений репозиторій
    git push <псевдонім_віддаленого_репозиторію> <назва_гілки>
    
    git push origin main

Щоб завантажити на ваш комп'ютер повну копію віддаленого репозиторію ви можете скористатися наступною командою:

    git clone <адреса_віддаленого_репозиторію>
    
    git clone https://github.com/fc-fullstack-courses/pfe-2024-1-git-lessons.git
    
Цю команду виконуйте у папці, в якій має з'явитися папка з проектом

Щоб довантажити в локальний репозиторій недостаючі коміти з віддаленого репозиторію виконайте насутпну команду:
    git pull <псевдонім_віддаленого_репозиторію> <назва_гілки>
    
    git pull origin main
    
    
Робота з папками, .gitkeep
    Якщо у вашому проекті є пуста папка її гіт індексувати не буде, тобто з наю коміт ви не зробите.
    Щоб виправити це вам достатьньо додати будь-який файл до неї. 
    Часто на проектах роль цього файла виконує пустий прихований файл .gitkeep
    
    Якщо ви будете індексувати папку то гіт проіндексує всі можливі файли і папки всередені.
    Тому знаходячись у корені проекту якщо ввести команду git add . то проіндексує абсолютно всі файли
    
Якщо ви хочете створити список ігнорованих файлів та папок у вашому репозиторі ви маєте створити файл який називається 
    .gitignore
    
Всередені цього файла ви можете поміщати назви файлів і папок які ви не хочете індексувати і комітити
Підтримує глоб-шаблони (*, ?, ! і тд)

зазвичай ви будете ігнорувати папку
node_modules

Відміна змін у файлі до останнього коміту:
    git restore <шлях_до_файлу>...
    
Винесення файлу з зони індексації (зміни все ще будуть у робочій директорії):
    git restore --staged <шлях_до_файлу>...
    git reset HEAD <шлях_до_файлу>...

Відміна комітів:
    Якщо у вас були локально зроблені погані коміти ви можете відмінити їх наступним чином:
        git reset <назва_коміту>
    де <назва_коміту> - це назва яку коміту дав гіт (sdv541d12dcs3). В якості коміта ви обираєте останній коміт перед першим "поганим комітом"
    
    Якщо погані коміти були запушені на віддллений репозиторій то для їх виправлення використувується команда
        git revert <назва_коміту>
    де <назва_коміту> - це назва першого "поганого" коміту який треба виправити
    
    git revert створює "анти-коміт" від вашого останнього коміту до вказаного в команді в якому робить всі зміни щоб прибрати сліди існування поганих комітів (додані ними файли і текст видалятся, а видалені - повернуться)
    
По повідомленням комітів

Перший рядок - головне короке резюме, що саме коміт змінює. 
Коміт має бути в наказовому стилі (Уявіть що ви добудовуєте речення "Якщо цей коміт буде застосовано, то ...")
Резюме починаємо з велкої літери та НЕ закінчуємо на крапку

Якщо додавати опис то пропускаючи 2 рядок на третьому моете писати детальніше.
В описах ви пишите що і чому ви зробили а не як ви щось зробили. За як видповідають закомічені файли

Видалення відстежуваних файлів
    Для того щоб зробити відстежуваний файл невідстежуваним використовуєтся команда
        git rm <назва_файлу>...
    Вона видалить файл з робочої директорії та проіндексує зміну на його видалення

Розгалуження в git
    Гілка - вказівник на певний коміт. Вважається що до гілки належить всі коміти від того на який тикає вказівник до першого коміту
    
    HEAD - вказівник на поточний коміт в проекті. Зазвичай вказує на якусь гілку.
    
Робота з гілками:
     
     git branch <назва_гілки> - створює нову гілку на поточному коміті (на якому HEAD) (Create / створення0
     
     git branch - показує список гілок у проекті (Read /  читання)
     
     Оновлення гілок - це додавання на них коміти
     
     git branch -d <назва_гілки> - видаляє вказану гілку (не видаляє її якщо вона остання або ви зраз на ній сидите)
     
Перехід між гілками:

    git checkout <назва_гілки/коміту> - перенести HEAD на вказану гілку / коміт
     
    git switch <назва_гілки> - перенести HEAD на вказану гілку
    git switch --detach <назва_коміту> - перенести HEAD на вказаний коміт
    
Злиття гілок:
    Щоб додати до старішої гілки нові коміти використоууєтся наступна команда:
        git merge <гілка_з_новими_комітами>
        
    Виконувати команду маєте знаходячись на "старій гілці" інакше комана нічого не зробить
    У випадку коли гіт не побачить якихось конфліктів він виконає fast-forward (просто перенесе вказівник гілки вперед)
    
    Іноді ви не зможете злити коміти через fast-forward. 
    Тоді ми кажемо що відбувається конфлікт який ми маємо допогти розв'язати гіту.
    
    Для розв'язку конфлікту у підсумку буде створено спеціальний коміт злиття, який має декілька батьківських комітів (на віміну від звичайних)
    
    Способи розв'язку конфлікту у файлах:
        - залишити версію коду з "старої гілки"
        - замінити код на версію з "нової гілки"
        - якось переписати код щоб обидві версії працювали
    
    Після розв'язку конфліктів у всіх проблемних файлам ми їх індексуємо і робимо коміт злиття.
    
    Також є можливість відмінити злиття командою git merge --abort якщо ви передумали з якоїсь причини
